Chapter Assignment
Problem Statement: Sum Of Nodes
Problem Level: EASY
Problem Description:
For a given Binary Tree of integers, find and return the sum of all the nodes data.
Example:
                        10
                      /    \
                    20      30
                   /    \
                 40    50

When we sum up all the nodes data together, [10, 20, 30, 40 50] we get 150. Hence, the output will be 150.

Input Format:
The first and the only line of input will contain the nodes data, all separated by a single space. Since -1 is used as an indication 
whether the left or right node data exist for root, it will not be a part of the node data.

Output Format:
The first and the only line of output prints the sum of all the nodes data present in the binary tree.

Note:
You are not required to print anything explicitly. It has already been taken care of.

Constraints:
1 <= N <= 10^6
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec

Sample Input 1:
2 3 4 6 -1 -1 -1 -1 -1

Sample Output 1:
 15

Sample Input 2:
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1

Sample Output 2:
 28



=====Answer=====
Correct Option: 

--------------------------------------------------------------------------------------------------------------------------------------

Chapter Assignment
Problem Statement:  Balanced
Problem Level: MEDIUM
Problem Description:
Given a binary tree, check if its balanced i.e. depth of left and right subtrees of every node differ by at max 1. Return true if 
given binary tree is balanced, false otherwise.
Input format :
Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.

Sample Input 1 :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1

Sample Output 1 :
false

Sample Input 2 :
1 2 3 -1 -1 -1 -1

Sample Output 2 :
true



=====Answer=====
Correct Option: 

--------------------------------------------------------------------------------------------------------------------------------------

Chapter Assignment
Problem Statement: Level order traversal
Problem Level: EASY
Problem Description:
For a given a Binary Tree of type integer, print it in a level order fashion where each level will be printed on a new line. Elements 
on every level will be printed in a linear fashion and a single space will separate them.
Example:

For the above-depicted tree, when printed in a level order fashion, the output would look like:

10
20 30 
40 50 60
Where each new line denotes the level in the tree.

Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication 
whether the left or right node data exist for root, it will not be a part of the node data.

Output Format:
The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.

Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec

Sample Input 1:
10 20 30 40 50 -1 60 -1 -1 -1 -1 -1 -1

Sample Output 1:
10 
20 30 
40 50 60

Sample Input 2:
8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1

Sample Output 2:
8 
3 10 
1 6 14 
4 7 13



=====Answer=====
Correct Option: 

--------------------------------------------------------------------------------------------------------------------------------------

Chapter Assignment
Problem Statement: Remove Leaf nodes
Problem Level: EASY
Problem Description:
Remove all leaf nodes from a given Binary Tree. Leaf nodes are those nodes, which don't have any children.
Note : Root will also be a leaf node if it doesn't have left and right child. You don't need to print the tree, just remove all leaf 
nodes and return the updated root.
Input format :
Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)
Output Format :
Elements are printed level wise, each level in new line (separated by space).

Sample Input :
8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1

Sample Output :
8
3 10
6 14



=====Answer=====
Correct Option: 

--------------------------------------------------------------------------------------------------------------------------------------

Chapter Assignment
Problem Statement: Level wise linkedlist
Problem Level: MEDIUM
Problem Description:
Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of 
each level linked list.
Input format :
The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by 
space. If any node does not have left or right child, take -1 in its place. Since -1 is used as an indication whether the left or 
right nodes exist, therefore, it will not be a part of the data of any node.

Output format :
Each level linked list is printed in new line (elements are separated by space).

Constraints:
Time Limit: 1 second

Sample Input 1:
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1

Sample Output 1:
5 
6 10 
2 3 
9



=====Answer=====
Correct Option: 

--------------------------------------------------------------------------------------------------------------------------------------

Chapter Assignment
Problem Statement: ZigZag tree
Problem Level: HARD
Problem Description:
Given a binary tree, print the zig zag order i.e print level 1 from left to right, level 2 from right to left and so on. This means 
odd levels should get printed from left to right and even level right to left.
Input format :
Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)
Output Format :
Elements are printed level wise, each level in new line (separated by space).

Sample Input :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1

Sample Output :
5
10 6
2 3
9



=====Answer=====
Correct Option: 

--------------------------------------------------------------------------------------------------------------------------------------

Chapter Assignment
Problem Statement: Nodes without sibling
Problem Level: EASY
Problem Description:
For a given Binary Tree of type integer, print all the nodes without any siblings.
Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication 
whether the left or right node data exist for root, it will not be a part of the node data.

Output Format:
The only line of output prints the node data in a top to down fashion with reference to the root. 
Node data in the left subtree will be printed first and then the right subtree.
A single space will separate them all.

Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 second

Sample Input 1:
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1

Sample Output 1:
9

Sample Input 2:
2 4 5 6 -1 -1 7 20 30 80 90 -1 8 9 -1 -1 -1 -1 -1 -1 -1 -1 -1

Sample Output 2:
6 8 7 9

Explanation of Sample Input 2:
The input tree when represented in a two-dimensional plane, it would look like this:


In respect to the root, node data in the left subtree that satisfy the condition of not having a sibling would be 6 and 8, taken in a 
top-down sequence. Similarly, for the right subtree, 7 and 9 are the node data without any sibling.

Since we print the siblings in the left-subtree first and then the siblings from the right subtree, taken in a top-down fashion, we 
print 6 8 7 9.



=====Answer=====
Correct Option: 

--------------------------------------------------------------------------------------------------------------------------------------